# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_data.ipynb.

# %% auto 0
__all__ = ['Dataset', 'collate', 'Sampler', 'BatchSampler', 'DataLoader', 'get_dataset', 'accuracy']

# %% ../nbs/01_data.ipynb 2
import fastcore.all as fc
import random
import torch.multiprocessing as mp

# %% ../nbs/01_data.ipynb 3
import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
import torchvision


# %% ../nbs/01_data.ipynb 5
class Dataset:
    def __init__(self, x, y): fc.store_attr()
        
    def __len__(self): return len(self.x)
    
    def __getitem__(self,i): return self.x[i], self.y[i]
    
    def split(self, percent=0.2):
        res = list(range(len(self.x)))
        random.shuffle(res)
        sp=int(len(self.x)*0.2)
        return Dataset(self.x[res[sp:]],self.y[res[sp:]]),Dataset(self.x[res[:sp]],self.y[res[:sp]])

# %% ../nbs/01_data.ipynb 6
def collate(b):
    xs,ys = zip(*b)
    return torch.stack(xs),torch.stack(ys)

# %% ../nbs/01_data.ipynb 7
class Sampler():
    def __init__(self, ds, shuffle=False): self.n,self.shuffle = len(ds),shuffle
    def __iter__(self):
        res = list(range(self.n))
        if self.shuffle: random.shuffle(res)
        return iter(res)

# %% ../nbs/01_data.ipynb 8
class BatchSampler():
    def __init__(self, sampler, bs, drop_last=False): fc.store_attr()
    def __iter__(self): yield from fc.chunked(iter(self.sampler), self.bs, drop_last=self.drop_last)

# %% ../nbs/01_data.ipynb 9
class DataLoader():
    def __init__(self, ds, batchs, n_workers=1, collate_fn=collate): fc.store_attr()
    def __iter__(self):
        yield from map(self.ds.__getitem__, iter(self.batchs))
     

# %% ../nbs/01_data.ipynb 10
def get_dataset():
    data = datasets.FashionMNIST(root="data",train=True,download=True,transform=ToTensor())
    data = Dataset(torch.flatten(data.data, start_dim=1).float(),data.targets)
    t,v=data.split()
    td=DataLoader(t, BatchSampler(Sampler(t,True),64))
    vd=DataLoader(v, BatchSampler(Sampler(v),2*64))
    return td, vd

# %% ../nbs/01_data.ipynb 11
def accuracy(out, yb): return (out.argmax(dim=1)==yb).float().mean()
