[
  {
    "objectID": "01_data.html",
    "href": "01_data.html",
    "title": "dlfs",
    "section": "",
    "text": "source\n\ncollate_fn\n\n collate_fn (b)\n\n\nsource\n\n\ninplace\n\n inplace (f)\n\n\n\n\ninplace.._f\n\n inplace.<locals>._f (b)\n\n\nsource\n\n\ncollate_dict\n\n collate_dict (ds)\n\n\nsource\n\n\nDataLoaders\n\n DataLoaders (*dls)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nSampler\n\n Sampler (ds, shuffle=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nBatchSampler\n\n BatchSampler (sampler, bs, drop_last=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\naccuracy\n\n accuracy (out, yb)\n\n\nsource\n\n\nDataLoaders\n\n DataLoaders (*dls)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nget_dls\n\n get_dls (train_ds, valid_ds, bs, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Other Parameters\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section See Also\n  else: warn(msg)\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Notes\n  else: warn(msg)\n\nsource\n\n\nshow_image\n\n show_image (im, ax=None, figsize=None, title=None, noframe=True,\n             cmap=None, norm=None, aspect=None, interpolation=None,\n             alpha=None, vmin=None, vmax=None, origin=None, extent=None,\n             interpolation_stage=None, filternorm=True, filterrad=4.0,\n             resample=None, url=None, data=None)\n\nShow a PIL or PyTorch image on ax.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nim\n\n\n\n\n\nax\nNoneType\nNone\n\n\n\nfigsize\nNoneType\nNone\n\n\n\ntitle\nNoneType\nNone\n\n\n\nnoframe\nbool\nTrue\n\n\n\ncmap\nNoneType\nNone\nThe Colormap instance or registered colormap name used to map scalar datato colors.This parameter is ignored if X is RGB(A).\n\n\nnorm\nNoneType\nNone\nThe normalization method used to scale scalar data to the [0, 1] rangebefore mapping to colors using cmap. By default, a linear scaling isused, mapping the lowest value to 0 and the highest to 1.If given, this can be one of the following:- An instance of .Normalize or one of its subclasses (see :doc:/tutorials/colors/colormapnorms).- A scale name, i.e. one of “linear”, “log”, “symlog”, “logit”, etc. For a list of available scales, call matplotlib.scale.get_scale_names(). In that case, a suitable .Normalize subclass is dynamically generated and instantiated.This parameter is ignored if X is RGB(A).\n\n\naspect\nNoneType\nNone\nThe aspect ratio of the Axes. This parameter is particularlyrelevant for images since it determines whether data pixels aresquare.This parameter is a shortcut for explicitly calling.Axes.set_aspect. See there for further details.- ‘equal’: Ensures an aspect ratio of 1. Pixels will be square (unless pixel sizes are explicitly made non-square in data coordinates using extent).- ‘auto’: The Axes is kept fixed and the aspect is adjusted so that the data fit in the Axes. In general, this will result in non-square pixels.\n\n\ninterpolation\nNoneType\nNone\nThe interpolation method used.Supported values are ‘none’, ‘antialiased’, ‘nearest’, ‘bilinear’,‘bicubic’, ‘spline16’, ‘spline36’, ‘hanning’, ‘hamming’, ‘hermite’,‘kaiser’, ‘quadric’, ‘catrom’, ‘gaussian’, ‘bessel’, ‘mitchell’,‘sinc’, ‘lanczos’, ‘blackman’.If interpolation is ‘none’, then no interpolation is performedon the Agg, ps, pdf and svg backends. Other backends will fall backto ‘nearest’. Note that most SVG renderers perform interpolation atrendering and that the default interpolation method they implementmay differ.If interpolation is the default ‘antialiased’, then ‘nearest’interpolation is used if the image is upsampled by more than afactor of three (i.e. the number of display pixels is at leastthree times the size of the data array). If the upsampling rate issmaller than 3, or the image is downsampled, then ‘hanning’interpolation is used to act as an anti-aliasing filter, unless theimage happens to be upsampled by exactly a factor of two or one.See:doc:/gallery/images_contours_and_fields/interpolation_methodsfor an overview of the supported interpolation methods, and:doc:/gallery/images_contours_and_fields/image_antialiasing fora discussion of image antialiasing.Some interpolation methods require an additional radius parameter,which can be set by filterrad. Additionally, the antigrain imageresize filter is controlled by the parameter filternorm.\n\n\nalpha\nNoneType\nNone\nThe alpha blending value, between 0 (transparent) and 1 (opaque).If alpha is an array, the alpha blending values are applied pixelby pixel, and alpha must have the same shape as X.\n\n\nvmin\nNoneType\nNone\n\n\n\nvmax\nNoneType\nNone\n\n\n\norigin\nNoneType\nNone\nPlace the [0, 0] index of the array in the upper left or lowerleft corner of the Axes. The convention (the default) ‘upper’ istypically used for matrices and images.Note that the vertical axis points upward for ‘lower’but downward for ‘upper’.See the :doc:/tutorials/intermediate/imshow_extent tutorial forexamples and a more detailed description.\n\n\nextent\nNoneType\nNone\nThe bounding box in data coordinates that the image will fill.These values may be unitful and match the units of the Axes.The image is stretched individually along x and y to fill the box.The default extent is determined by the following conditions.Pixels have unit size in data coordinates. Their centers are oninteger coordinates, and their center coordinates range from 0 tocolumns-1 horizontally and from 0 to rows-1 vertically.Note that the direction of the vertical axis and thus the defaultvalues for top and bottom depend on origin:- For origin == 'upper' the default is (-0.5, numcols-0.5, numrows-0.5, -0.5).- For origin == 'lower' the default is (-0.5, numcols-0.5, -0.5, numrows-0.5).See the :doc:/tutorials/intermediate/imshow_extent tutorial forexamples and a more detailed description.\n\n\ninterpolation_stage\nNoneType\nNone\nIf ‘data’, interpolationis carried out on the data provided by the user. If ‘rgba’, theinterpolation is carried out after the colormapping has beenapplied (visual interpolation).\n\n\nfilternorm\nbool\nTrue\nA parameter for the antigrain image resize filter (see theantigrain documentation). If filternorm is set, the filternormalizes integer values and corrects the rounding errors. Itdoesn’t do anything with the source floating point values, itcorrects only integers according to the rule of 1.0 which meansthat any sum of pixel weights must be equal to 1.0. So, thefilter function must produce a graph of the proper shape.\n\n\nfilterrad\nfloat\n4.0\nThe filter radius for filters that have a radius parameter, i.e.when interpolation is one of: ‘sinc’, ‘lanczos’ or ‘blackman’.\n\n\nresample\nNoneType\nNone\nWhen True, use a full resampling method. When False, onlyresample when the output image is larger than the input image.\n\n\nurl\nNoneType\nNone\nSet the url of the created .AxesImage. See .Artist.set_url.\n\n\ndata\nNoneType\nNone\n\n\n\n\n\nimport nbdev; nbdev.nbdev_export()"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()"
  },
  {
    "objectID": "04_initialization.html",
    "href": "04_initialization.html",
    "title": "dlfs",
    "section": "",
    "text": "import nbdev; nbdev.nbdev_export()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dlfs",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "dlfs",
    "section": "Install",
    "text": "Install\npip install dlfs"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "dlfs",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "02_Trainer.html",
    "href": "02_Trainer.html",
    "title": "dlfs",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "02_Trainer.html#callbacks",
    "href": "02_Trainer.html#callbacks",
    "title": "dlfs",
    "section": "Callbacks",
    "text": "Callbacks\n\nsource\n\nidentity\n\n identity (*args)\n\n\nsource\n\n\nCallback\n\n Callback ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nMetricsCB\n\n MetricsCB (*ms, **metrics)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nProgressCB\n\n ProgressCB (plot=False)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nto_cpu\n\n to_cpu (x)\n\n\nsource\n\n\nCancelEpochException\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nCancelBatchException\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nCancelFitException\nCommon base class for all non-exit exceptions.\n\nsource\n\n\nwith_callbacks\n\n with_callbacks (nm)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nCore\n\n Core ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nMomentumLearner\n\n MomentumLearner (mom=0.85)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nLearner\n\n Learner (model, core, dls, callbacks, loss_func, lr, opt_func=<class\n          'torch.optim.sgd.SGD'>)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nclass LRFinderCB(Callback):\n    def __init__(self, lr_mult=1.3): fc.store_attr()\n    \n    def before_fit(self):\n        self.lrs,self.losses = [],[]\n        self.min = math.inf\n\n    def after_batch(self):\n        if not self.trainer.model.training: raise CancelEpochException()\n        self.lrs.append(self.trainer.opt.param_groups[0]['lr'])\n        loss = self.trainer.loss\n        self.losses.append(loss)\n        if loss < self.min: self.min = loss\n        if loss > self.min*3: raise CancelFitException()\n        for g in self.trainer.opt.param_groups: g['lr'] *= self.lr_mult\n\n\nm,nh,out = 28*28,50,10\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,out))\nloss_func=nn.CrossEntropyLoss()\n\n\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ntrain=Learner(model, Core(), dls, [metrics,ProgressCB(plot=True)],F.cross_entropy,lr=0.2)\ntrain.fit(3)\n\n\n\n\n\n\n\n  \n    \n      accuracy\n      loss\n      epoch\n      train\n    \n  \n  \n    \n      0.601\n      1.187\n      0\n      True\n    \n    \n      0.726\n      0.764\n      0\n      False\n    \n    \n      0.745\n      0.705\n      1\n      True\n    \n    \n      0.763\n      0.658\n      1\n      False\n    \n    \n      0.780\n      0.615\n      2\n      True\n    \n    \n      0.754\n      0.658\n      2\n      False\n    \n  \n\n\n\n\n\n\n\nLearner?\n\n\nInit signature: Learner(model, dls, loss_func, lr, opt_func=<class 'torch.optim.sgd.SGD'>)\nDocstring:      <no docstring>\nType:           type\nSubclasses:     \n\n\n\n\n\nimport nbdev; nbdev.nbdev_export()"
  },
  {
    "objectID": "03_activations.html",
    "href": "03_activations.html",
    "title": "dlfs",
    "section": "",
    "text": "from datasets import load_dataset,load_dataset_builder\nx,y = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\n\nDownloading builder script:   0%|          | 0.00/4.83k [00:00<?, ?B/s]Downloading builder script: 100%|##########| 4.83k/4.83k [00:00<00:00, 4.00MB/s]\nDownloading readme:   0%|          | 0.00/8.85k [00:00<?, ?B/s]Downloading readme: 100%|##########| 8.85k/8.85k [00:00<00:00, 7.61MB/s]\nFound cached dataset fashion_mnist (/home/runner/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1)\n  0%|          | 0/2 [00:00<?, ?it/s]100%|##########| 2/2 [00:00<00:00, 409.14it/s]\n\n\n\nx,y = 'image','label'\nname = \"fashion_mnist\"\ndsd = load_dataset(name)\nbs = 1024\n\n@inplace\ndef transformi(b): b[x] = [torch.flatten(TF.to_tensor(o)) for o in b[x]]\n\ntds = dsd.with_transform(transformi)\ndls = DataLoaders.from_dd(tds, bs, num_workers=0)\ndt = dls.train\n\nFound cached dataset fashion_mnist (/Users/felix/.cache/huggingface/datasets/fashion_mnist/fashion_mnist/1.0.0/8d6c32399aa01613d96e2cbc9b13638f359ef62bb33612b077b4c247f6ef99c1)\n\n\n\n\n\n\nxb,yb = next(iter(dt))\nxb.shape,yb[:10]\n\n(torch.Size([1024, 784]), tensor([0, 1, 8, 8, 3, 9, 2, 8, 8, 2]))\n\n\n\nm,nh,out = 784,50,10\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,out))\nloss_func=nn.CrossEntropyLoss()\n\n\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ntrain=Learner(model, Core(), dls, [metrics,ProgressCB(plot=True)],F.cross_entropy,lr=0.2)\ntrain.fit(3)\n\n\n\n\n\n\n\n  \n    \n      accuracy\n      loss\n      epoch\n      train\n    \n  \n  \n    \n      0.611\n      1.179\n      0\n      True\n    \n    \n      0.720\n      0.789\n      0\n      False\n    \n    \n      0.742\n      0.712\n      1\n      True\n    \n    \n      0.767\n      0.641\n      1\n      False\n    \n    \n      0.778\n      0.619\n      2\n      True\n    \n    \n      0.786\n      0.596\n      2\n      False\n    \n  \n\n\n\n\n\n\n\nsource\n\nappend_stats\n\n append_stats (hook, mod, inp, outp)\n\n\nsource\n\n\nHook\n\n Hook (m, f)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,out))\nhooks = [Hook(l, append_stats) for l in model[:3].children()]\n\n\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ntrain=Learner(model, Core(), dls, [metrics,ProgressCB(plot=True)],F.cross_entropy,lr=0.2)\ntrain.fit(3)\n\n\n\n\n\n\n\n  \n    \n      accuracy\n      loss\n      epoch\n      train\n    \n  \n  \n    \n      0.611\n      1.185\n      0\n      True\n    \n    \n      0.714\n      0.772\n      0\n      False\n    \n    \n      0.743\n      0.709\n      1\n      True\n    \n    \n      0.749\n      0.687\n      1\n      False\n    \n    \n      0.782\n      0.612\n      2\n      True\n    \n    \n      0.799\n      0.577\n      2\n      False\n    \n  \n\n\n\n\n\n\n\nfor h in hooks:\n    plt.plot(h.stats[0])\n    h.remove()\nplt.legend(range(5));\n\n\n\n\n\nsource\n\n\nHooks\n\n Hooks (ms, f)\n\nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.\n\nsource\n\n\nget_hist\n\n get_hist (h)\n\n\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,out))\nwith Hooks(model, append_stats) as hooks:\n    metrics = MetricsCB(accuracy=MulticlassAccuracy())\n    train=Learner(model, Core(), dls, [metrics,ProgressCB(plot=True)],F.cross_entropy,lr=0.2)\n    train.fit(3)\n    fig,axes=plt.subplots(1,2,figsize=(10,4))\n    for h in hooks:\n        for i in 0,1: axes[i].plot(h.stats[i])\n    plt.legend(range(3))\n    fig,axes=plt.subplots(1,3,figsize=(10,20))\n    for ax,h in zip(axes.flatten(), hooks):\n        show_image(get_hist(h), ax, origin='lower')\n\n\n\n\n\n\n\n  \n    \n      accuracy\n      loss\n      epoch\n      train\n    \n  \n  \n    \n      0.598\n      1.214\n      0\n      True\n    \n    \n      0.685\n      0.852\n      0\n      False\n    \n    \n      0.744\n      0.714\n      1\n      True\n    \n    \n      0.743\n      0.688\n      1\n      False\n    \n    \n      0.783\n      0.613\n      2\n      True\n    \n    \n      0.777\n      0.639\n      2\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nHooksCB\n\n HooksCB (hookfunc, mod_filter=<function noop>)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nhc=HooksCB(append_stats)\n\n\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,out))\nhc=HooksCB(append_stats)\nmetrics = MetricsCB(accuracy=MulticlassAccuracy())\ntrain=Learner(model, Core(), dls, [hc,metrics,ProgressCB(plot=True)],F.cross_entropy,lr=0.2)\ntrain.fit(3)\n\n\n\n\n\n\n\n  \n    \n      accuracy\n      loss\n      epoch\n      train\n    \n  \n  \n    \n      0.597\n      1.205\n      0\n      True\n    \n    \n      0.688\n      0.847\n      0\n      False\n    \n    \n      0.741\n      0.711\n      1\n      True\n    \n    \n      0.771\n      0.642\n      1\n      False\n    \n    \n      0.782\n      0.612\n      2\n      True\n    \n    \n      0.790\n      0.590\n      2\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nimport nbdev; nbdev.nbdev_export()"
  }
]